// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package petstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoidServiceClient is the client API for VoidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoidServiceClient interface {
	Void(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type voidServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoidServiceClient(cc grpc.ClientConnInterface) VoidServiceClient {
	return &voidServiceClient{cc}
}

func (c *voidServiceClient) Void(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/another.VoidService/Void", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoidServiceServer is the server API for VoidService service.
// All implementations must embed UnimplementedVoidServiceServer
// for forward compatibility
type VoidServiceServer interface {
	Void(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedVoidServiceServer()
}

// UnimplementedVoidServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVoidServiceServer struct {
}

func (UnimplementedVoidServiceServer) Void(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Void not implemented")
}
func (UnimplementedVoidServiceServer) mustEmbedUnimplementedVoidServiceServer() {}

// UnsafeVoidServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoidServiceServer will
// result in compilation errors.
type UnsafeVoidServiceServer interface {
	mustEmbedUnimplementedVoidServiceServer()
}

func RegisterVoidServiceServer(s grpc.ServiceRegistrar, srv VoidServiceServer) {
	s.RegisterService(&VoidService_ServiceDesc, srv)
}

func _VoidService_Void_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoidServiceServer).Void(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/another.VoidService/Void",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoidServiceServer).Void(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// VoidService_ServiceDesc is the grpc.ServiceDesc for VoidService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoidService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "another.VoidService",
	HandlerType: (*VoidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Void",
			Handler:    _VoidService_Void_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "another.proto",
}
