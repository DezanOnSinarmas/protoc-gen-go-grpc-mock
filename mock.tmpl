// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: {{.Source}}

package {{.Package}}

import (
    context "context"
    reflect "reflect"

    gomock "github.com/golang/mock/gomock"
    grpc "google.golang.org/grpc"

    {{range .Imports}}
    {{.}}
    {{end}}
)

{{range .Services}}
{{ $svc := . }}

// Mock{{.Service}}Client is a mock of {{.Service}}Client interface.
type Mock{{.Service}}Client struct {
    ctrl     *gomock.Controller
    recorder *Mock{{.Service}}ClientMockRecorder
}

// Mock{{.Service}}ClientMockRecorder is the mock recorder for Mock{{.Service}}Client.
type Mock{{.Service}}ClientMockRecorder struct {
	mock *Mock{{.Service}}Client
}

// NewMock{{.Service}}Client creates a new mock instance.
func NewMock{{.Service}}Client(ctrl *gomock.Controller) *Mock{{.Service}}Client {
	mock := &Mock{{.Service}}Client{ctrl: ctrl}
	mock.recorder = &Mock{{.Service}}ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mock{{.Service}}Client) EXPECT() *Mock{{.Service}}ClientMockRecorder {
	return m.recorder
}

{{range .Funcs}}

// {{.Func}} mocks base method.
func (m *Mock{{$svc.Service}}Client) {{.Func}}(ctx context.Context, in *{{.Request}}, opts ...grpc.CallOption) (*{{.Response}}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "{{.Func}}", varargs...)
	ret0, _ := ret[0].(*{{.Response}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// {{.Func}} indicates an expected call of {{.Func}}.
func (mr *Mock{{$svc.Service}}ClientMockRecorder) {{.Func}}(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{.Func}}", reflect.TypeOf((*Mock{{$svc.Service}}Client)(nil).{{.Func}}), varargs...)
}

{{end}}

// Mock{{.Service}}Server is a mock of {{.Service}}Server interface.
type Mock{{.Service}}Server struct {
	ctrl     *gomock.Controller
	recorder *Mock{{.Service}}ServerMockRecorder
}

// Mock{{.Service}}ServerMockRecorder is the mock recorder for Mock{{.Service}}Server.
type Mock{{.Service}}ServerMockRecorder struct {
	mock *Mock{{.Service}}Server
}

// NewMock{{.Service}}Server creates a new mock instance.
func NewMock{{.Service}}Server(ctrl *gomock.Controller) *Mock{{.Service}}Server {
	mock := &Mock{{.Service}}Server{ctrl: ctrl}
	mock.recorder = &Mock{{.Service}}ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mock{{.Service}}Server) EXPECT() *Mock{{.Service}}ServerMockRecorder {
	return m.recorder
}

{{range .Funcs}}

// {{.Func}} mocks base method.
func (m *Mock{{$svc.Service}}Server) {{.Func}}(arg0 context.Context, arg1 *{{.Request}}) (*{{.Response}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{.Func}}", arg0, arg1)
	ret0, _ := ret[0].(*{{.Response}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// {{.Func}} indicates an expected call of {{.Func}}.
func (mr *Mock{{$svc.Service}}ServerMockRecorder) {{.Func}}(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{.Func}}", reflect.TypeOf((*Mock{{$svc.Service}}Server)(nil).{{.Func}}), arg0, arg1)
}

{{end}}

// mustEmbedUnimplemented{{.Service}}Server mocks base method.
func (m *Mock{{.Service}}Server) mustEmbedUnimplemented{{.Service}}Server() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplemented{{.Service}}Server")
}

// mustEmbedUnimplemented{{.Service}}Server indicates an expected call of mustEmbedUnimplemented{{.Service}}Server.
func (mr *Mock{{.Service}}ServerMockRecorder) mustEmbedUnimplemented{{.Service}}Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplemented{{.Service}}Server", reflect.TypeOf((*Mock{{.Service}}Server)(nil).mustEmbedUnimplemented{{.Service}}Server))
}

// MockUnsafe{{.Service}}Server is a mock of Unsafe{{.Service}}Server interface.
type MockUnsafe{{.Service}}Server struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafe{{.Service}}ServerMockRecorder
}

// MockUnsafe{{.Service}}ServerMockRecorder is the mock recorder for MockUnsafe{{.Service}}Server.
type MockUnsafe{{.Service}}ServerMockRecorder struct {
	mock *MockUnsafe{{.Service}}Server
}

// NewMockUnsafe{{.Service}}Server creates a new mock instance.
func NewMockUnsafe{{.Service}}Server(ctrl *gomock.Controller) *MockUnsafe{{.Service}}Server {
	mock := &MockUnsafe{{.Service}}Server{ctrl: ctrl}
	mock.recorder = &MockUnsafe{{.Service}}ServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafe{{.Service}}Server) EXPECT() *MockUnsafe{{.Service}}ServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplemented{{.Service}}Server mocks base method.
func (m *MockUnsafe{{.Service}}Server) mustEmbedUnimplemented{{.Service}}Server() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplemented{{.Service}}Server")
}

// mustEmbedUnimplemented{{.Service}}Server indicates an expected call of mustEmbedUnimplemented{{.Service}}Server.
func (mr *MockUnsafe{{.Service}}ServerMockRecorder) mustEmbedUnimplemented{{.Service}}Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplemented{{.Service}}Server", reflect.TypeOf((*MockUnsafe{{.Service}}Server)(nil).mustEmbedUnimplemented{{.Service}}Server))
}

{{end}}
